spring.application.name=stream-manager
spring.profiles.active=production,kafka
management.endpoints.web.exposure.include=metrics,prometheus,health
management.endpoint.prometheus.enabled=true
management.endpoint.health.enabled=true
server.port=8080
topology.build.enabled=false
topology.directAccess=true

google.api.host=http://metadata.google.internal
google.api.metadata.flavor=Google
stream.host=http://stream-external-vid-1.int.tango.me:8080/stream

# Kafka
spring.kafka.bootstrap-servers=kafka1-external:9092,kafka2-external:9092
spring.kafka.producer.properties.acks=all
spring.kafka.producer.properties.max.block.ms=10000
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.type.mapping=Stream:com.tango.stream.manager.model.Stream
spring.kafka.consumer.group-id=streammanager
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.listener.ack-mode=record

#live streams
stream.live.unfiltered.topic=streams.live.unfiltered
stream.live.unfiltered.application.id=live-streams-manager
kafka.streams.timeout.seconds=120

#terminated streams
kafka.stream.terminated.topic=streams.terminated
kafka.stream.terminated.group.id=streammanager_terminated_streams
kafka.stream.terminated.auto-offset-reset=earliest
kafka.stream.terminated.listener.factory.concurrency=10

#commands
commands.kafka.topic=streammanager.commands
commands.storage.ttl.sec=300
commands.failures.max=5
commands.node.port=8080
commands.execute.batch.size=10
commands.execute.lock.lease.ms=10000
commands.execute.lock.wait.ms=10000

#feign
feign.httpclient.enabled=true
feign.httpclient.connectionTimeout=5000
feign.httpclient.requestTimeout=5000
feign.httpclient.socketTimeout=5000
feign.httpclient.maxConnections=200
feign.httpclient.maxConnectionsPerRoute=2
feign.httpclient.timeToLive=10
feign.httpclient.timeToLiveUnit=SECONDS

# Reloading configuration
reload.config.location=application.properties
reload.config.period.millis=5000

# redis cluster db
redis.clusterAddress=
redis.ping.connection.interval=3000
redis.scan.interval.ms=5000
redis.decodeInExecutor=true
redis.executorThreads=16
redis.nettyThreads=32
redis.retryAttempts=5
redis.retryInterval=1500
redis.tcpNoDelay=true
redis.keepAlive=true

active.version.gateway=default

# node.registry
node.registry.pending.stream.expiration.time.sec=10
node.registry.gateway.stream.recovery.ttl=10
node.registry.cleanup.period.seconds=5
node.registry.keepAlive.wait.time.ms=1000
node.registry.keepAlive.lease.time.ms=2000
node.registry.gc.wait.time.ms=3000
node.registry.gc.lease.time.ms=5000

# balancer specific
balancer.gateway.balance.lease.time.ms=5000
balancer.gateway.balance.wait.time.ms=5000
balancer.gateway.unreachable.reported.by.stream.threshold.percent=10

# Gateway balancer
#----------------------------------------
balancer.gateway.region.toBalance.default=us-west
# Supported balancers: byFragmentsBalancer, byTrafficBalancer, byCpuUsage, byConnections
balancer.gateway.actual.name=byCpuUsage

# fragmentBase
balancer.gateway.fragmentBase.average.fragment.size.bytes.byOneStream=3000000
balancer.gateway.fragmentBase.average.fragment.size.bytes.byOneViewer=3000000
balancer.gateway.fragmentBase.fragment.size.threshold=200000000

# byCpuUsage in percents
# AVERAGE or MEDIAN
balancer.gateway.byCpuUsage.strategy=MEDIAN
balancer.gateway.byCpuUsage.average.cpu.usage.byOneStream=0.4
balancer.gateway.byCpuUsage.average.cpu.usage.byOneViewer=0.2
balancer.gateway.byCpuUsage.cpu.usage.threshold=80
#----------------------------------------

# Relay balancer
#----------------------------------------
balancer.relay.actual.name=byCpuUsage

# byCpuUsage in percents
# AVERAGE or MEDIAN
balancer.relay.byCpuUsage.strategy=MEDIAN
balancer.relay.byCpuUsage.average.cpu.usage.byOneStream=0.2
balancer.relay.byCpuUsage.average.cpu.usage.byOneViewer=0.2
balancer.relay.byCpuUsage.cpu.usage.threshold=80
#----------------------------------------


# Edge balancer
#----------------------------------------
balancer.edge.actual.name=byCpuUsage

# byCpuUsage in percents
# AVERAGE or MEDIAN
balancer.edge.byCpuUsage.strategy=MEDIAN
balancer.edge.byCpuUsage.average.cpu.usage.byOneStream=0.2
balancer.edge.byCpuUsage.average.cpu.usage.byOneViewer=0.2
balancer.edge.byCpuUsage.cpu.usage.threshold=80
#----------------------------------------

# redis storages
node.cluster.ttl.sec=20
node.ttl.sec=10
regions.live.ttl.sec=60
versions.live.sec=60

#mysql
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/streammanager
spring.datasource.hikari.username=root
spring.datasource.hikari.password=root
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.maximum-pool-size=100
spring.datasource.hikari.connectionTimeout=30000
spring.datasource.hikari.validation-timeout=30000

#viewers statistics
stats.viewer.monitor.interval.seconds=10
stats.viewer.store.percentiles=50,60,70,80,90
#strategy switcher
stats.viewer.strategy=plain-history
#static strategy params
stats.viewer.strategy.static.count=20
stats.viewer.strategy.static.count.us-west=30
#same-weekday-history strategy params
#possible percentiles: 50, 60, 70, 80, 90
stats.viewer.strategy.same-weekday-history.percentile=50
stats.viewer.strategy.same-weekday-history.weeks.count=4
#plain-history strategy params
stats.viewer.strategy.plain-history.percentile=50
stats.viewer.strategy.plain-history.days.count=7

#dao
stream.dao.streams.ttl.sec=3600
viewers.dao.pending.expiration.seconds=10
viewers.dao.pending.viewers.ttl.sec=3600
viewers.dao.stream.to.viewers.ttl.sec=3600


